* general configuration

Make org-mode the defualt file mode
#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'org-mode)
#+END_SRC

This will remove any trailing whitespace on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Let the yank command access the last thing copied to the system
clipboard
#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t
      select-enable-primary t
      save-interprogram-paste-before-kill t)
#+END_SRC

Let the apropos help search include non-interactive functions in its
search
#+BEGIN_SRC emacs-lisp
(setq apropos-do-all t)
#+END_SRC

Flash top and bottom bars of the screen as an alert
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Set the maximum length of a string printed by evaluating a function to
unlimited
#+BEGIN_SRC emacs-lisp
(setq eval-expression-print-length nil)
#+END_SRC

Use ido-mode for finding files and buffers. Enabling flex matching
will make it a fuzzy search.
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC

Auto-saved files should be saved to '~/.emacs.d/auto-save/'. This
obviously requires this directory to be in place.
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "auto-save/") t)))
#+END_SRC

* text-mode configuration

Turn on auto-fill mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

* prog-mode configuration

prog mode is the super class of every programming language mode

require the linum-relative package which enables relative line numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
               :ensure t)
#+END_SRC

Define and then set a function to start in prog-mode. The function
will:
- turn on relative line numbering
- require a final \n character at the end of the file
#+BEGIN_SRC emacs-lisp
  (defun my-prog-mode-config ()
    (linum-relative-on)
    (setq require-final-newline t))

  (add-hook 'prog-mode-hook 'my-prog-mode-config)
#+END_SRC
* configuration for Ruby

Require enh-ruby-mode
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
               :ensure t)
#+END_SRC

Use enh-ruby-mode instead of ruby-mode. Among other things, it has
  better detection of syntax errors.
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'auto-mode-alist
   '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
  (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
#+END_SRC

Adds a function to be run with enh-ruby-mode which:
- Sets "C-o" to jump to a new line
- creates "M-x insert-pry" command which will insert a pry statement
#+BEGIN_SRC emacs-lisp
  (defun my-enh-ruby-mode-config ()
    (local-set-key (kbd "C-o") 'jump-to-newline)
    (fset 'insert-pry
          (lambda (&optional arg)
            "Keyboard macro."
            (interactive "p")
            (kmacro-exec-ring-item
             (quote ("require 'pry'; binding.pry" 0 "%d"))
             arg))))

  (add-hook 'enh-ruby-mode-hook 'my-enh-ruby-mode-config)
#+END_SRC

Adds a hook to start ruby electric mode. Ruby electric mode will
auto-complete brackets, parens, and do-end blocks.
#+BEGIN_SRC emacs-lisp
  (add-hook 'enh-ruby-mode-hook 'ruby-electric-mode)
#+END_SRC


* configuration for Clojure

Require cider-mode. Cider-mode will evaluate clojure in a repl.
#+BEGIN_SRC emacs-lisp
  (use-package cider-mode
               :ensure t)
#+END_SRC

start eldoc-mode in cider-mode. Eldoc shows doc strings in the
mini-buffer.
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook 'eldoc-mode)
#+END_SRC

Hook for rainbow-delimiters mode. Rainbow delimiters colors parens
based on nesting level.
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

Hook for show parens mode. Show parens mode will highlight the
matching paren to the paren under the cursor
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'show-paren-mode)
#+END_SRC

Hook for smartparens mode. Smartparens mode auto-completes parens, and
adds commands that make working with paren-heavy languages easier.
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'smartparens-mode)
#+END_SRC

Tell the nrepl (which cider-mode users) to log protocol messages
#+BEGIN_SRC emacs-lisp
  (setq nrepl-log-messages t)
#+END_SRC

Don't automatically open the cider repl in a new window.
#+BEGIN_SRC emacs-lisp
  (setq cider-repl-pop-to-buffer-on-connect nil)
#+END_SRC
