* general configuration

Make org-mode the defualt file mode
#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'org-mode)
#+END_SRC

This will remove any trailing whitespace on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Let the yank command access the last thing copied to the system
clipboard
#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t
      select-enable-primary t
      save-interprogram-paste-before-kill t)
#+END_SRC

Let the apropos help search include non-interactive functions in its
search
#+BEGIN_SRC emacs-lisp
(setq apropos-do-all t)
#+END_SRC

Flash top and bottom bars of the screen as an alert
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Set the maximum length of a string printed by evaluating a function to
unlimited
#+BEGIN_SRC emacs-lisp
(setq eval-expression-print-length nil)
#+END_SRC

Use ido-mode for finding files and buffers. Enabling flex matching
will make it a fuzzy search.
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC

Auto-saved files should be saved to '~/.emacs.d/auto-save/'. This
obviously requires this directory to be in place.
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "auto-save/") t)))
#+END_SRC

* global keybindings

Set M-x to use helm
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

Set the magit bindings recommended in the magit tutorial
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC

I missed Vi's "o" button which would jump to the next line without
breaking the current line. So I wrote a function to do that and mapped
it to C-o. The function is defined in the custom functions section.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-o") 'jump-to-newline)
#+END_SRC

Use hippie-expand instead of the default expand. It will rotate
through many different expansion options. Can be a little much at
times.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

Set M-SPC to cyle through spaces between characters (alternating
between no space, one space, and however many spaces it is
currently). This can be used as a quick way to delete extra whitespace
#+BEGIN_SRC
(global-set-key (kbd "M-SPC") 'cycle-spacing)
#+END_SRC

* text-mode configuration

Turn on auto-fill mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

* prog-mode configuration

prog mode is the super class of every programming language mode

require the linum-relative package which enables relative line numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
               :ensure t)
#+END_SRC

Define and then set a function to start in prog-mode. The function
will:
- turn on relative line numbering
- require a final \n character at the end of the file
#+BEGIN_SRC emacs-lisp
  (defun my-prog-mode-config ()
    (linum-relative-on)
    (setq require-final-newline t))

  (add-hook 'prog-mode-hook 'my-prog-mode-config)
#+END_SRC
* org-mode configuration

Set keys that were supposed to be already set in org-mode, but for
some reason were not set for me by default.
#+BEGIN_SRC emacs-lisp
  (local-set-key (kbd "C-M-j") 'org-insert-heading)
  (local-set-key (kbd "C-<RET>") 'org-insert-heading-respect-content)
#+END_SRC

Specify which languages org-mode can execute (by C-c C-c'ing with the
cursor over a code-block). Org-mode can execute many languages, but it
only can execute emacs lisp by defualt, and the rest must be
explicitly enabled. At the moment this only explicitly enables shell
(bash) and ruby.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)
     (ruby . t)))
#+END_SRC

* smart-parens-mode configuration
The default slurping and barfing commands were being captured by my
terminal before smart parens mode could get them. This remapping
fixed that.
#+BEGIN_SRC emacs-lisp
  (defun my-smartparens-mode-config ()
    "map slurping and barfing (because the default C-M-<right>/<left> were being capture by the terminal)"
    (local-set-key (kbd "M-<right>") 'sp-backward-barf-sexp)
    (local-set-key (kbd "M-<left>") 'sp-backward-slurp-sexp))

  (add-hook 'smartparens-mode-hook 'my-smartparens-mode-config)
#+END_SRC
* configuration for Ruby

Require enh-ruby-mode
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
               :ensure t)
#+END_SRC

Use enh-ruby-mode instead of ruby-mode. Among other things, it has
  better detection of syntax errors.
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'auto-mode-alist
   '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
  (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
#+END_SRC

Adds a function to be run with enh-ruby-mode which:
- Sets "C-o" to jump to a new line
- creates "M-x insert-pry" command which will insert a pry statement
#+BEGIN_SRC emacs-lisp
  (defun my-enh-ruby-mode-config ()
    (local-set-key (kbd "C-o") 'jump-to-newline)
    (fset 'insert-pry
          (lambda (&optional arg)
            "Keyboard macro."
            (interactive "p")
            (kmacro-exec-ring-item
             (quote ("require 'pry'; binding.pry" 0 "%d"))
             arg))))

  (add-hook 'enh-ruby-mode-hook 'my-enh-ruby-mode-config)
#+END_SRC

Adds a hook to start ruby electric mode. Ruby electric mode will
auto-complete brackets, parens, and do-end blocks.
#+BEGIN_SRC emacs-lisp
  (add-hook 'enh-ruby-mode-hook 'ruby-electric-mode)
#+END_SRC

I this fix from https://github.com/pezra/rspec-mode is supposed to fix
a bug where rspec runs in zshell and doesn't work. I'm not sure if
it's actually helping me or not, as I haven't put much time into
getting rspec running in emacs.
#+BEGIN_SRC emacs-lisp
  (defadvice rspec-compile (around rspec-compile-around)
    "Use BASH shell for running the specs because of ZSH issues."
    (let ((shell-file-name "/bin/bash"))
      ad-do-it))
  (ad-activate 'rspec-compile)
#+END_SRC

* configuration for Clojure

Require cider-mode. Cider-mode will evaluate clojure in a repl.
#+BEGIN_SRC emacs-lisp
  (use-package cider-mode
               :ensure t)
#+END_SRC

start eldoc-mode in cider-mode. Eldoc shows doc strings in the
mini-buffer.
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook 'eldoc-mode)
#+END_SRC

Hook for rainbow-delimiters mode. Rainbow delimiters colors parens
based on nesting level.
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

Hook for show parens mode. Show parens mode will highlight the
matching paren to the paren under the cursor
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'show-paren-mode)
#+END_SRC

Hook for smartparens mode. Smartparens mode auto-completes parens, and
adds commands that make working with paren-heavy languages easier.
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'smartparens-mode)
#+END_SRC

Tell the nrepl (which cider-mode users) to log protocol messages
#+BEGIN_SRC emacs-lisp
  (setq nrepl-log-messages t)
#+END_SRC

Don't automatically open the cider repl in a new window.
#+BEGIN_SRC emacs-lisp
  (setq cider-repl-pop-to-buffer-on-connect nil)
#+END_SRC
* configuration for emacs lisp

Add hook for smartparens mode. (see clojure config for explanation)
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'smartparens-mode)
#+END_SRC

Add hook for show parens mode (see clojure config)
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
#+END_SRC

Add hook for eldoc-mode (see clojure config)
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

Add hook for rainbow delimiters mode (see clojure config)
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

On saving, byte compile any .el file that already has a corrisponding
.elc file. This is to guard against someone updating the .el file but
forgetting to byte-compile it, and not having the changes take
effect.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook 'byte-compile-current-buffer)
#+END_SRC

* custom functions

I wrote this because I missed Vi's "o" button which would create an
empty line below the current one, and jump to it without breaking the
current line. I may be duplicating some existing emacs command here.
#+BEGIN_SRC emacs-lisp
  (defun jump-to-newline ()
      "Move to the end of the current line, then create a newline.
  \(Like \"o\" in Vi.\) I'm probably replicating a pre-existing command."
      (interactive)
      (move-end-of-line nil)
      (newline)
      (indent-for-tab-command))
#+END_SRC

I got this function from:
http://ergoemacs.org/emacs/emacs_byte_compile.html

When in emacs-lisp-mode, this will check that a byte compiled version
of the current .el file exists, and if it does, it will
byte-compile. This is useful for keeping .el files from falling out of
date behind their byte-compiled versions.
#+BEGIN_SRC emacs-lisp
  (defun byte-compile-current-buffer ()
    "`byte-compile' current buffer if it's emacs-lisp-mode and compiled file exists."
    (interactive)
    (when (and (eq major-mode 'emacs-lisp-mode)
               (file-exists-p (byte-compile-dest-file buffer-file-name)))
      (byte-compile-file buffer-file-name)))
#+END_SRC

** org-mode spreadsheet helper functions
I wrote these functions to help with calculating my work hours and
wages in an org-mode spreadsheet.

Adds up the minutes in hh:mm formatted time string.
#+BEGIN_SRC emacs-lisp
  (defun to-minutes (time-string)
    "Accepts a string of format '(h)h:mm' and returns total minutes"
    (string-match "\\([0-9]+\\):\\([0-9]\\{2,\\}\\)" time-string)
    (let ((hours (string-to-number (match-string 1 time-string)))
          (minutes (string-to-number (match-string 2 time-string))))
      (if (> minutes 59)
          (error (concat (number-to-string minutes) " is not between 0 and 59"))
        (+ minutes (* hours 60)))))
#+END_SRC

Takes a float representing minutes, and returns an hh:mm formatted
string.
#+BEGIN_SRC emacs-lisp
  (defun number-to-time (number)
    "Converts a float into formatted string (hh:mm)"
    (let ((hours (/ number 60))
          (minutes (% number 60)))
      (concat (format "%d" hours)
              ":"
              (format "%02d" minutes))))
#+END_SRC

Takes a list of times in the hh:mm format, and returns a sum in the same
format
#+BEGIN_SRC emacs-lisp
  (defun sum-times (time-list)
    "Takes a list of times (hh:mm), and returns sum in the same format (hh:mm)"
    (number-to-time (apply '+ (mapcar 'to-minutes time-list))))
#+END_SRC

Takes a hh:mm formatted time string, converts it to total minutes, and
  then multiplies it by an hourly rate. Returns a string formatted
  like dollars but without the "$" (because org-mode cannot read from
  a spreadsheet cell starting with "$")
#+BEGIN_SRC emacs-lisp
  (defun time-to-wage (time dollars-per-hour)
    "Converts time (hh:mm) to wages."
    (let ((minutes (to-minutes time)))
      (let ((hours (/ minutes
                      60.0)))
        (format "%0.2f" (* hours dollars-per-hour)))))
#+END_SRC

Converts a float into dollar format ($0.00)
#+BEGIN_SRC emacs-lisp
  (defun number-to-dollars (float)
    "Formats float into dollar string"
    (format "$%0.2f" float))
#+END_SRC
